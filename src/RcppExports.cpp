// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// at
arma::mat at(arma::mat m, arma::mat G);
RcppExport SEXP _phenoDLM_at(SEXP mSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(at(m, G));
    return rcpp_result_gen;
END_RCPP
}
// Rt
arma::mat Rt(arma::mat G, arma::mat C, arma::mat W);
RcppExport SEXP _phenoDLM_Rt(SEXP GSEXP, SEXP CSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(Rt(G, C, W));
    return rcpp_result_gen;
END_RCPP
}
// ft
arma::mat ft(arma::mat F, arma::mat a);
RcppExport SEXP _phenoDLM_ft(SEXP FSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(ft(F, a));
    return rcpp_result_gen;
END_RCPP
}
// Qt
arma::mat Qt(arma::mat F, arma::mat R, arma::mat V);
RcppExport SEXP _phenoDLM_Qt(SEXP FSEXP, SEXP RSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(Qt(F, R, V));
    return rcpp_result_gen;
END_RCPP
}
// mt
arma::mat mt(double Y, arma::mat F, arma::mat a, arma::mat R, arma::mat f, arma::mat Q);
RcppExport SEXP _phenoDLM_mt(SEXP YSEXP, SEXP FSEXP, SEXP aSEXP, SEXP RSEXP, SEXP fSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(mt(Y, F, a, R, f, Q));
    return rcpp_result_gen;
END_RCPP
}
// Ct
arma::mat Ct(arma::mat F, arma::mat R, arma::mat Q);
RcppExport SEXP _phenoDLM_Ct(SEXP FSEXP, SEXP RSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(Ct(F, R, Q));
    return rcpp_result_gen;
END_RCPP
}
// ht
arma::mat ht(arma::mat G, arma::mat C, arma::mat R, arma::mat theta, arma::mat a, arma::mat m);
RcppExport SEXP _phenoDLM_ht(SEXP GSEXP, SEXP CSEXP, SEXP RSEXP, SEXP thetaSEXP, SEXP aSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ht(G, C, R, theta, a, m));
    return rcpp_result_gen;
END_RCPP
}
// Ht
arma::mat Ht(arma::mat C, arma::mat G, arma::mat R);
RcppExport SEXP _phenoDLM_Ht(SEXP CSEXP, SEXP GSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Ht(C, G, R));
    return rcpp_result_gen;
END_RCPP
}
// ht2
arma::mat ht2(arma::mat G, arma::mat C, arma::mat W, arma::mat theta, arma::mat H, arma::mat m);
RcppExport SEXP _phenoDLM_ht2(SEXP GSEXP, SEXP CSEXP, SEXP WSEXP, SEXP thetaSEXP, SEXP HSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(ht2(G, C, W, theta, H, m));
    return rcpp_result_gen;
END_RCPP
}
// Ht2
arma::mat Ht2(arma::mat C, arma::mat G, arma::mat W);
RcppExport SEXP _phenoDLM_Ht2(SEXP CSEXP, SEXP GSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(Ht2(C, G, W));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormChol
arma::mat mvrnormChol(int n, arma::mat mu, arma::mat sigma);
RcppExport SEXP _phenoDLM_mvrnormChol(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormChol(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormSVD
arma::mat mvrnormSVD(int n, arma::mat mu, arma::mat sigma);
RcppExport SEXP _phenoDLM_mvrnormSVD(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormSVD(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// normden
double normden(double x, double mu, double sd);
RcppExport SEXP _phenoDLM_normden(SEXP xSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(normden(x, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// KalmanFilter
List KalmanFilter(arma::vec Y, arma::mat V, arma::mat W, List model);
RcppExport SEXP _phenoDLM_KalmanFilter(SEXP YSEXP, SEXP VSEXP, SEXP WSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(KalmanFilter(Y, V, W, model));
    return rcpp_result_gen;
END_RCPP
}
// FFBS
List FFBS(arma::mat G, arma::mat W, List Kalman, bool SVD);
RcppExport SEXP _phenoDLM_FFBS(SEXP GSEXP, SEXP WSEXP, SEXP KalmanSEXP, SEXP SVDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< List >::type Kalman(KalmanSEXP);
    Rcpp::traits::input_parameter< bool >::type SVD(SVDSEXP);
    rcpp_result_gen = Rcpp::wrap(FFBS(G, W, Kalman, SVD));
    return rcpp_result_gen;
END_RCPP
}
// calc_SSE_error
arma::mat calc_SSE_error(arma::mat y, arma::mat theta, arma::mat F);
RcppExport SEXP _phenoDLM_calc_SSE_error(SEXP ySEXP, SEXP thetaSEXP, SEXP FSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_SSE_error(y, theta, F));
    return rcpp_result_gen;
END_RCPP
}
// calc_SSE_theta
arma::mat calc_SSE_theta(arma::mat theta, arma::mat G);
RcppExport SEXP _phenoDLM_calc_SSE_theta(SEXP thetaSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_SSE_theta(theta, G));
    return rcpp_result_gen;
END_RCPP
}
// cauchy_MH
double cauchy_MH(double par_current, double shape, double rate, double c);
RcppExport SEXP _phenoDLM_cauchy_MH(SEXP par_currentSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type par_current(par_currentSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(cauchy_MH(par_current, shape, rate, c));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_seas_IG_NA
List mcmc_seas_IG_NA(int n_reps, arma::mat dat, List initial_values, NumericVector c, List model, double T_star, bool svd, bool save_theta);
RcppExport SEXP _phenoDLM_mcmc_seas_IG_NA(SEXP n_repsSEXP, SEXP datSEXP, SEXP initial_valuesSEXP, SEXP cSEXP, SEXP modelSEXP, SEXP T_starSEXP, SEXP svdSEXP, SEXP save_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_reps(n_repsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< List >::type initial_values(initial_valuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type T_star(T_starSEXP);
    Rcpp::traits::input_parameter< bool >::type svd(svdSEXP);
    Rcpp::traits::input_parameter< bool >::type save_theta(save_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_seas_IG_NA(n_reps, dat, initial_values, c, model, T_star, svd, save_theta));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_local_seas_NA
List mcmc_local_seas_NA(int n_reps, arma::mat dat, List initial_values, List prior, List model, double T_star, bool svd);
RcppExport SEXP _phenoDLM_mcmc_local_seas_NA(SEXP n_repsSEXP, SEXP datSEXP, SEXP initial_valuesSEXP, SEXP priorSEXP, SEXP modelSEXP, SEXP T_starSEXP, SEXP svdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_reps(n_repsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< List >::type initial_values(initial_valuesSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type T_star(T_starSEXP);
    Rcpp::traits::input_parameter< bool >::type svd(svdSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_local_seas_NA(n_reps, dat, initial_values, prior, model, T_star, svd));
    return rcpp_result_gen;
END_RCPP
}
// inflection_cpp
List inflection_cpp(arma::vec y);
RcppExport SEXP _phenoDLM_inflection_cpp(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(inflection_cpp(y));
    return rcpp_result_gen;
END_RCPP
}
// armaWhichMin
int armaWhichMin(arma::vec x);
RcppExport SEXP _phenoDLM_armaWhichMin(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(armaWhichMin(x));
    return rcpp_result_gen;
END_RCPP
}
// armaWhichMax
int armaWhichMax(arma::vec x);
RcppExport SEXP _phenoDLM_armaWhichMax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(armaWhichMax(x));
    return rcpp_result_gen;
END_RCPP
}
// remove_sos_new
List remove_sos_new(arma::mat pog_dat, arma::mat sos_dat);
RcppExport SEXP _phenoDLM_remove_sos_new(SEXP pog_datSEXP, SEXP sos_datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pog_dat(pog_datSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sos_dat(sos_datSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_sos_new(pog_dat, sos_dat));
    return rcpp_result_gen;
END_RCPP
}
// remove_pog_new
List remove_pog_new(arma::mat sos_dat, arma::mat pog_dat);
RcppExport SEXP _phenoDLM_remove_pog_new(SEXP sos_datSEXP, SEXP pog_datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sos_dat(sos_datSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pog_dat(pog_datSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_pog_new(sos_dat, pog_dat));
    return rcpp_result_gen;
END_RCPP
}
// merge_df2
List merge_df2(arma::mat sos_dat, arma::mat pog_dat);
RcppExport SEXP _phenoDLM_merge_df2(SEXP sos_datSEXP, SEXP pog_datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sos_dat(sos_datSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pog_dat(pog_datSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_df2(sos_dat, pog_dat));
    return rcpp_result_gen;
END_RCPP
}
// checkd_min_new
List checkd_min_new(arma::mat dat, arma::vec type, int d);
RcppExport SEXP _phenoDLM_checkd_min_new(SEXP datSEXP, SEXP typeSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(checkd_min_new(dat, type, d));
    return rcpp_result_gen;
END_RCPP
}
// checkd_max_new
List checkd_max_new(arma::mat dat, arma::vec type, int d);
RcppExport SEXP _phenoDLM_checkd_max_new(SEXP datSEXP, SEXP typeSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(checkd_max_new(dat, type, d));
    return rcpp_result_gen;
END_RCPP
}
// checkd_max_alt
List checkd_max_alt(arma::mat dat, arma::vec type, int d);
RcppExport SEXP _phenoDLM_checkd_max_alt(SEXP datSEXP, SEXP typeSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dat(datSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(checkd_max_alt(dat, type, d));
    return rcpp_result_gen;
END_RCPP
}
// check_2sos
List check_2sos(arma::mat df, arma::vec type, double cf);
RcppExport SEXP _phenoDLM_check_2sos(SEXP dfSEXP, SEXP typeSEXP, SEXP cfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type cf(cfSEXP);
    rcpp_result_gen = Rcpp::wrap(check_2sos(df, type, cf));
    return rcpp_result_gen;
END_RCPP
}
// check_2pog
List check_2pog(arma::mat df, arma::vec type, double cf);
RcppExport SEXP _phenoDLM_check_2pog(SEXP dfSEXP, SEXP typeSEXP, SEXP cfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type cf(cfSEXP);
    rcpp_result_gen = Rcpp::wrap(check_2pog(df, type, cf));
    return rcpp_result_gen;
END_RCPP
}
// check_2up
List check_2up(arma::mat df, arma::vec type, arma::vec y, double cf);
RcppExport SEXP _phenoDLM_check_2up(SEXP dfSEXP, SEXP typeSEXP, SEXP ySEXP, SEXP cfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type cf(cfSEXP);
    rcpp_result_gen = Rcpp::wrap(check_2up(df, type, y, cf));
    return rcpp_result_gen;
END_RCPP
}
// rule_cpp_no_errors
List rule_cpp_no_errors(arma::vec y, double cf, int d, int s);
RcppExport SEXP _phenoDLM_rule_cpp_no_errors(SEXP ySEXP, SEXP cfSEXP, SEXP dSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type cf(cfSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(rule_cpp_no_errors(y, cf, d, s));
    return rcpp_result_gen;
END_RCPP
}
// add_year_cpp_fixed
arma::mat add_year_cpp_fixed(List rule_out, double shift, int year_start, int year_end, int s);
RcppExport SEXP _phenoDLM_add_year_cpp_fixed(SEXP rule_outSEXP, SEXP shiftSEXP, SEXP year_startSEXP, SEXP year_endSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type rule_out(rule_outSEXP);
    Rcpp::traits::input_parameter< double >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< int >::type year_start(year_startSEXP);
    Rcpp::traits::input_parameter< int >::type year_end(year_endSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(add_year_cpp_fixed(rule_out, shift, year_start, year_end, s));
    return rcpp_result_gen;
END_RCPP
}
// seas_per_year_cpp
arma::vec seas_per_year_cpp(arma::vec years, arma::vec type, int year_start, int year_end);
RcppExport SEXP _phenoDLM_seas_per_year_cpp(SEXP yearsSEXP, SEXP typeSEXP, SEXP year_startSEXP, SEXP year_endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type years(yearsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type year_start(year_startSEXP);
    Rcpp::traits::input_parameter< int >::type year_end(year_endSEXP);
    rcpp_result_gen = Rcpp::wrap(seas_per_year_cpp(years, type, year_start, year_end));
    return rcpp_result_gen;
END_RCPP
}
// quantile2
double quantile2(arma::vec x, double q, bool upper);
RcppExport SEXP _phenoDLM_quantile2(SEXP xSEXP, SEXP qSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile2(x, q, upper));
    return rcpp_result_gen;
END_RCPP
}
// seas_per_year_all_fixed
List seas_per_year_all_fixed(List pts, double n_iter, int year_start, int year_end, double cut);
RcppExport SEXP _phenoDLM_seas_per_year_all_fixed(SEXP ptsSEXP, SEXP n_iterSEXP, SEXP year_startSEXP, SEXP year_endSEXP, SEXP cutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< double >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type year_start(year_startSEXP);
    Rcpp::traits::input_parameter< int >::type year_end(year_endSEXP);
    Rcpp::traits::input_parameter< double >::type cut(cutSEXP);
    rcpp_result_gen = Rcpp::wrap(seas_per_year_all_fixed(pts, n_iter, year_start, year_end, cut));
    return rcpp_result_gen;
END_RCPP
}
// pts_to_intervals_cpp_fixed
List pts_to_intervals_cpp_fixed(List pts, List seas_output, int year_start, int year_end, double alpha);
RcppExport SEXP _phenoDLM_pts_to_intervals_cpp_fixed(SEXP ptsSEXP, SEXP seas_outputSEXP, SEXP year_startSEXP, SEXP year_endSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< List >::type seas_output(seas_outputSEXP);
    Rcpp::traits::input_parameter< int >::type year_start(year_startSEXP);
    Rcpp::traits::input_parameter< int >::type year_end(year_endSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(pts_to_intervals_cpp_fixed(pts, seas_output, year_start, year_end, alpha));
    return rcpp_result_gen;
END_RCPP
}
// rule_to_intervals_cpp_fixed
List rule_to_intervals_cpp_fixed(List pts, double n_iter, int year_start, int year_end, double cut, double alpha);
RcppExport SEXP _phenoDLM_rule_to_intervals_cpp_fixed(SEXP ptsSEXP, SEXP n_iterSEXP, SEXP year_startSEXP, SEXP year_endSEXP, SEXP cutSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< double >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type year_start(year_startSEXP);
    Rcpp::traits::input_parameter< int >::type year_end(year_endSEXP);
    Rcpp::traits::input_parameter< double >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rule_to_intervals_cpp_fixed(pts, n_iter, year_start, year_end, cut, alpha));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_to_intervals_cpp_fixed
List mcmc_to_intervals_cpp_fixed(arma::mat St, double cf, int d, double shift, int s, int year_start, int year_end, double cut, double alpha, bool return_points);
RcppExport SEXP _phenoDLM_mcmc_to_intervals_cpp_fixed(SEXP StSEXP, SEXP cfSEXP, SEXP dSEXP, SEXP shiftSEXP, SEXP sSEXP, SEXP year_startSEXP, SEXP year_endSEXP, SEXP cutSEXP, SEXP alphaSEXP, SEXP return_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type St(StSEXP);
    Rcpp::traits::input_parameter< double >::type cf(cfSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type year_start(year_startSEXP);
    Rcpp::traits::input_parameter< int >::type year_end(year_endSEXP);
    Rcpp::traits::input_parameter< double >::type cut(cutSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_points(return_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_to_intervals_cpp_fixed(St, cf, d, shift, s, year_start, year_end, cut, alpha, return_points));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phenoDLM_at", (DL_FUNC) &_phenoDLM_at, 2},
    {"_phenoDLM_Rt", (DL_FUNC) &_phenoDLM_Rt, 3},
    {"_phenoDLM_ft", (DL_FUNC) &_phenoDLM_ft, 2},
    {"_phenoDLM_Qt", (DL_FUNC) &_phenoDLM_Qt, 3},
    {"_phenoDLM_mt", (DL_FUNC) &_phenoDLM_mt, 6},
    {"_phenoDLM_Ct", (DL_FUNC) &_phenoDLM_Ct, 3},
    {"_phenoDLM_ht", (DL_FUNC) &_phenoDLM_ht, 6},
    {"_phenoDLM_Ht", (DL_FUNC) &_phenoDLM_Ht, 3},
    {"_phenoDLM_ht2", (DL_FUNC) &_phenoDLM_ht2, 6},
    {"_phenoDLM_Ht2", (DL_FUNC) &_phenoDLM_Ht2, 3},
    {"_phenoDLM_mvrnormChol", (DL_FUNC) &_phenoDLM_mvrnormChol, 3},
    {"_phenoDLM_mvrnormSVD", (DL_FUNC) &_phenoDLM_mvrnormSVD, 3},
    {"_phenoDLM_normden", (DL_FUNC) &_phenoDLM_normden, 3},
    {"_phenoDLM_KalmanFilter", (DL_FUNC) &_phenoDLM_KalmanFilter, 4},
    {"_phenoDLM_FFBS", (DL_FUNC) &_phenoDLM_FFBS, 4},
    {"_phenoDLM_calc_SSE_error", (DL_FUNC) &_phenoDLM_calc_SSE_error, 3},
    {"_phenoDLM_calc_SSE_theta", (DL_FUNC) &_phenoDLM_calc_SSE_theta, 2},
    {"_phenoDLM_cauchy_MH", (DL_FUNC) &_phenoDLM_cauchy_MH, 4},
    {"_phenoDLM_mcmc_seas_IG_NA", (DL_FUNC) &_phenoDLM_mcmc_seas_IG_NA, 8},
    {"_phenoDLM_mcmc_local_seas_NA", (DL_FUNC) &_phenoDLM_mcmc_local_seas_NA, 7},
    {"_phenoDLM_inflection_cpp", (DL_FUNC) &_phenoDLM_inflection_cpp, 1},
    {"_phenoDLM_armaWhichMin", (DL_FUNC) &_phenoDLM_armaWhichMin, 1},
    {"_phenoDLM_armaWhichMax", (DL_FUNC) &_phenoDLM_armaWhichMax, 1},
    {"_phenoDLM_remove_sos_new", (DL_FUNC) &_phenoDLM_remove_sos_new, 2},
    {"_phenoDLM_remove_pog_new", (DL_FUNC) &_phenoDLM_remove_pog_new, 2},
    {"_phenoDLM_merge_df2", (DL_FUNC) &_phenoDLM_merge_df2, 2},
    {"_phenoDLM_checkd_min_new", (DL_FUNC) &_phenoDLM_checkd_min_new, 3},
    {"_phenoDLM_checkd_max_new", (DL_FUNC) &_phenoDLM_checkd_max_new, 3},
    {"_phenoDLM_checkd_max_alt", (DL_FUNC) &_phenoDLM_checkd_max_alt, 3},
    {"_phenoDLM_check_2sos", (DL_FUNC) &_phenoDLM_check_2sos, 3},
    {"_phenoDLM_check_2pog", (DL_FUNC) &_phenoDLM_check_2pog, 3},
    {"_phenoDLM_check_2up", (DL_FUNC) &_phenoDLM_check_2up, 4},
    {"_phenoDLM_rule_cpp_no_errors", (DL_FUNC) &_phenoDLM_rule_cpp_no_errors, 4},
    {"_phenoDLM_add_year_cpp_fixed", (DL_FUNC) &_phenoDLM_add_year_cpp_fixed, 5},
    {"_phenoDLM_seas_per_year_cpp", (DL_FUNC) &_phenoDLM_seas_per_year_cpp, 4},
    {"_phenoDLM_quantile2", (DL_FUNC) &_phenoDLM_quantile2, 3},
    {"_phenoDLM_seas_per_year_all_fixed", (DL_FUNC) &_phenoDLM_seas_per_year_all_fixed, 5},
    {"_phenoDLM_pts_to_intervals_cpp_fixed", (DL_FUNC) &_phenoDLM_pts_to_intervals_cpp_fixed, 5},
    {"_phenoDLM_rule_to_intervals_cpp_fixed", (DL_FUNC) &_phenoDLM_rule_to_intervals_cpp_fixed, 6},
    {"_phenoDLM_mcmc_to_intervals_cpp_fixed", (DL_FUNC) &_phenoDLM_mcmc_to_intervals_cpp_fixed, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_phenoDLM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
